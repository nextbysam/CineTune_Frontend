import { NextRequest, NextResponse } from 'next/server';
import { promises as fs } from 'fs';
import path from 'path';
import { jobManager } from '@/lib/job-manager';
import { nanoid } from 'nanoid';

// Handle CORS preflight request
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  });
}

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ jobId: string }> }
) {
  const requestId = nanoid().slice(0, 8);
  const { jobId } = await params;
  
  try {
    // Check if job exists
    const job = jobManager.getJob(jobId);
    
    if (!job) {
      return NextResponse.json(
        {
          success: false,
          error: 'Job not found',
          message: `No job found with ID: ${jobId}`,
        },
        { status: 404 }
      );
    }

    // Return job status and captions if available
    const response: any = {
      success: true,
      jobId: jobId,
      status: job.status,
    };

    if (job.status === 'completed' && job.captions) {
      response.captions = job.captions;
      response.message = 'Captions generated successfully';
      
      // TODO: Also try to read from captions_for_remotion.json file
      // This would be the actual file generated by the Python script
      try {
        const captionsFilePath = path.join(process.cwd(), 'captions_for_remotion.json');
        
        const captionsFileContent = await fs.readFile(captionsFilePath, 'utf-8');
        
        const fileCaptions = JSON.parse(captionsFileContent);
        
        // Use file captions if available, otherwise use memory captions
        response.captions = fileCaptions.captions || job.captions;
        response.source = 'file';
        
      } catch (fileError) {
        response.source = 'memory';
      }
      
    } else if (job.status === 'failed') {
      response.error = job.error;
      response.message = 'Caption generation failed';
    } else if (job.status === 'processing') {
      response.message = 'Video is still being processed';
    }

    return NextResponse.json(response, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      },
    });

  } catch (error) {
    
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to retrieve captions',
        message: error instanceof Error ? error.message : 'Unknown error',
      },
      { 
        status: 500,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
          'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        },
      }
    );
  }
}

// Optional: Add DELETE method to clean up completed jobs
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ jobId: string }> }
) {
  try {
    const { jobId } = await params;
    
    const deleted = jobManager.deleteJob(jobId);
    
    return NextResponse.json({
      success: true,
      message: deleted ? 'Job deleted successfully' : 'Job not found',
      jobId: jobId,
    });

  } catch (error) {
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to delete job',
        message: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
} 